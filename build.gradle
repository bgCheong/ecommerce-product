// build.gradle

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3' // Spring Boot 3.x 버전에서는 '3.2.0' 같은 최신 안정화 버전을 권장합니다.
    id 'io.spring.dependency-management' version '1.1.7'
    // id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // 오래된 플러그인 삭제
}

group = 'com.shop'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0") // Spring Boot 버전에 맞는 Cloud 버전을 사용해야 합니다.
}

// 1. 생성될 Q-Type 클래스들의 위치를 지정합니다.
def querydslGeneratedDir = "$buildDir/generated/querydsl"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // QueryDSL 의존성
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.h2database:h2'
}

// 2. sourceSets에 생성된 querydsl 디렉토리를 추가합니다.
sourceSets {
    main {
        java {
            srcDirs += querydslGeneratedDir
        }
    }
}

// 3. Q-Type을 생성하는 task를 정의하고, compileJava가 실행되기 전에 실행되도록 설정합니다.
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslGeneratedDir)
}

// 오래된 플러그인 관련 설정들 모두 삭제
// querydsl { ... }
// compileQuerydsl { ... }
// configurations { querydsl.extendsFrom ... }

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-parameters']
}

tasks.named('test') {
    useJUnitPlatform()
}

// 4. clean 태스크 실행 시 generated 폴더도 함께 삭제되도록 설정합니다.
clean {
    delete file(querydslGeneratedDir)
}